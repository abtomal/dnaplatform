/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ReentrancyAttacker,
  ReentrancyAttackerInterface,
} from "../../../contracts/test/ReentrancyAttacker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attackAuctionBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "attackAuctionClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "attackCollectionPurchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "attackCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "attacking",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionContract",
    outputs: [
      {
        internalType: "contract DnaAuction",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "auctionId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collectionContract",
    outputs: [
      {
        internalType: "contract DnaCollection",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_auctionContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_auctionId",
        type: "uint256",
      },
    ],
    name: "setAuctionTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_collectionContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "setCollectionTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610d548061001f6000396000f3fe6080604052600436106100ab5760003560e01c80633c0bbcd9116100645780633c0bbcd9146101a8578063407c2821146101d35780634118c160146101fe57806360d7718c14610208578063709263c114610231578063f85dbf3b1461025c576100b2565b80630ab8afac146100b75780630fdfbd19146100e257806310782f8f146100ec578063150b7a021461011757806317d70f7c146101545780633888d36a1461017f576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100cc610273565b6040516100d9919061088c565b60405180910390f35b6100ea610297565b005b3480156100f857600080fd5b50610101610385565b60405161010e91906108c0565b60405180910390f35b34801561012357600080fd5b5061013e60048036038101906101399190610a9f565b61038b565b60405161014b9190610b5d565b60405180910390f35b34801561016057600080fd5b5061016961059b565b60405161017691906108c0565b60405180910390f35b34801561018b57600080fd5b506101a660048036038101906101a19190610b78565b6105a1565b005b3480156101b457600080fd5b506101bd6105ec565b6040516101ca9190610bd3565b60405180910390f35b3480156101df57600080fd5b506101e86105ff565b6040516101f591906108c0565b60405180910390f35b610206610605565b005b34801561021457600080fd5b5061022f600480360381019061022a9190610b78565b6106f1565b005b34801561023d57600080fd5b5061024661073d565b6040516102539190610c0f565b60405180910390f35b34801561026857600080fd5b50610271610763565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600560006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663150bde03346003546040518363ffffffff1660e01b815260040161031091906108c0565b6000604051808303818588803b15801561032957600080fd5b505af115801561033d573d6000803e3d6000fd5b50505050506000610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90610c87565b60405180910390fd5b565b60025481565b6000600560009054906101000a900460ff161561058957600460008154809291906103b590610cd6565b91905055506003600454101561058857600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104a55760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe5c873a6002546040518263ffffffff1660e01b815260040161047491906108c0565b600060405180830381600087803b15801561048e57600080fd5b505af192505050801561049f575060015b50610587565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461058657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663150bde03476003546040518363ffffffff1660e01b815260040161055991906108c0565b6000604051808303818588803b15801561057257600080fd5b505af193505050508015610584575060015b505b5b5b5b63150b7a0260e01b9050949350505050565b60035481565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055505050565b600560009054906101000a900460ff1681565b60045481565b6001600560006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639979ef45346002546040518363ffffffff1660e01b815260040161067c91906108c0565b6000604051808303818588803b15801561069557600080fd5b505af11580156106a9573d6000803e3d6000fd5b505050505060006106ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e690610c87565b60405180910390fd5b565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001600560006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe5c873a6002546040518263ffffffff1660e01b81526004016107d991906108c0565b600060405180830381600087803b1580156107f357600080fd5b505af1158015610807573d6000803e3d6000fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061085261084d6108488461080d565b61082d565b61080d565b9050919050565b600061086482610837565b9050919050565b600061087682610859565b9050919050565b6108868161086b565b82525050565b60006020820190506108a1600083018461087d565b92915050565b6000819050919050565b6108ba816108a7565b82525050565b60006020820190506108d560008301846108b1565b92915050565b6000604051905090565b600080fd5b600080fd5b60006108fa8261080d565b9050919050565b61090a816108ef565b811461091557600080fd5b50565b60008135905061092781610901565b92915050565b610936816108a7565b811461094157600080fd5b50565b6000813590506109538161092d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109ac82610963565b810181811067ffffffffffffffff821117156109cb576109ca610974565b5b80604052505050565b60006109de6108db565b90506109ea82826109a3565b919050565b600067ffffffffffffffff821115610a0a57610a09610974565b5b610a1382610963565b9050602081019050919050565b82818337600083830152505050565b6000610a42610a3d846109ef565b6109d4565b905082815260208101848484011115610a5e57610a5d61095e565b5b610a69848285610a20565b509392505050565b600082601f830112610a8657610a85610959565b5b8135610a96848260208601610a2f565b91505092915050565b60008060008060808587031215610ab957610ab86108e5565b5b6000610ac787828801610918565b9450506020610ad887828801610918565b9350506040610ae987828801610944565b925050606085013567ffffffffffffffff811115610b0a57610b096108ea565b5b610b1687828801610a71565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b5781610b22565b82525050565b6000602082019050610b726000830184610b4e565b92915050565b60008060408385031215610b8f57610b8e6108e5565b5b6000610b9d85828601610918565b9250506020610bae85828601610944565b9150509250929050565b60008115159050919050565b610bcd81610bb8565b82525050565b6000602082019050610be86000830184610bc4565b92915050565b6000610bf982610859565b9050919050565b610c0981610bee565b82525050565b6000602082019050610c246000830184610c00565b92915050565b600082825260208201905092915050565b7f5265656e7472616e63792061747461636b20617474656d707400000000000000600082015250565b6000610c71601983610c2a565b9150610c7c82610c3b565b602082019050919050565b60006020820190508181036000830152610ca081610c64565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ce1826108a7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d1357610d12610ca7565b5b60018201905091905056fea2646970667358221220a49276795a46277832d710f4f23ccae38453548b64dac8b44451768205728d7864736f6c634300081c0033";

type ReentrancyAttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentrancyAttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReentrancyAttacker__factory extends ContractFactory {
  constructor(...args: ReentrancyAttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ReentrancyAttacker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReentrancyAttacker__factory {
    return super.connect(runner) as ReentrancyAttacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyAttackerInterface {
    return new Interface(_abi) as ReentrancyAttackerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ReentrancyAttacker {
    return new Contract(address, _abi, runner) as unknown as ReentrancyAttacker;
  }
}
